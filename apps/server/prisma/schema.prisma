// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String
  email      String  @unique @db.VarChar(191)
  password   String?
  provider   String? @db.VarChar(100)
  oauth_id   String?
  profilePic String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationsIds String[]

  conversations Conversation[]
  messages      Message[]

  groups       Groups[]
  GroupMessage GroupMessage[]
  GroupMember  GroupMember[]
}

model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIds String[]
  participants   User[]

  messageIds String[]
  messages   Message[]
}

model Message {
  id String @id @default(uuid())

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//////////////////////////

model Groups {
  id         String @id @default(uuid())
  name       String
  inviteCode String @unique

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id], onDelete: Cascade)

  groupMember  GroupMember[]
  groupMessage GroupMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GroupMessage {
  id String @id @default(uuid())

  memberName String
  role       MemberRole @default(GUEST)

  groupId String
  group   Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  ADMIN
  GUEST
}

model GroupMember {
  id         String     @id @default(uuid())
  role       MemberRole @default(GUEST)
  memberName String

  memberId String
  member   User   @relation(fields: [memberId], references: [id])

  groupId String
  group   Groups @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
